70000000 
70400001 
70800002
70C00003
71000004
71400005 // MOVI R5, #5 (DS)
71800006 // MOVI R6, #6 (DS)
71C00007 // MOVI R7, #7 (DS)
72000008 // MOVI R8, #8 (DS)
72400009 // MOVI R9, #9 (DS)
7280000A // MOVI R10 #10(DS)
72C0000B
7300000C
7340000D
7380000E
73C0000F
74000010
74400011 // MOVI R17 #17(DS) -> J TARGET
74800012 // MOVI R18 #18(DS) -> JL
74C00013 // MOVI R19 #19(DS) -> BR TARGET
75000014 //  MOVI R20 #20(DS) -> BRL
75400015
75800016
75C00017
76000018
76400019
7680001A // MOVI R26, #26
76C0001B // MOVI R26, #27
7700001C
7740001D
7780001E
77C0001F // MOVI R31, #31
00021000 // ADD r0, r1, r1   : r0 = 2
08420001 // ADDI r1, r1, #1  : r1 = 2
10843000 // SUB r2, r2, r3 : r2 = -1
18C03000 // NEG r3, r3  : r3 = -3 
21004000 // NOT r4, r4 : r4 = ~4
294A4000 // AND r5, r5, r6 : r5 = 5 & 6
318C0007 // ANDI r6, r6, #7 : r6 = 6 & 7
39CE8000 // OR r7, r7, r8 : r7 = r7 | r8
42100009 // ORI R8, R8, #9 : R8 = R8 | 9
4A52A000 // XOR R9, R9, R10 : R9 = R9 ^ R10
52941020 // LSR R10, R10, R1 : R10 = R10 >> 2 ( i = 1 )
52D60002 // LSR R11 R11, #2 : R11 = R11 >> 2  ( i = 0 )
5B181020 // ASR R12, R12, R1 : R12 = R12 >>> 2 ( i = 1 )
5B5A0002 // ASR R13 R13, #2 : R13 = R13 >>> 2  ( i = 0 )
639C1020 // SHL R14, R14, R1 : R14 = R14 << 2 ( i = 1 )
63DE0002 // SHL R15, R15, #2 : R15 = R15 << 2  ( i = 0 )
6C201020 // ROR R16, R16, R1 : R16 = ROR( R16 , 2 ) ( i = 1 )
6C620002 // ROR R17, R17, #2 : ROR( R17 , 2 )  ( i = 0 )





